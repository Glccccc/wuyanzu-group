list_num1 = input(' Введите целые положительные числа через пробел: ').split()
list_num2 = input(' Введите целые положительные числа через пробел: ').split()
# как следует из задания из каждого ввода формируется отдельный список объектов int.
list_num1 = [int(num) for num in list_num1]
list_num2 = [int(num) for num in list_num2]

# ИСПОЛЬЗОВАТЬ: альтернативный способ написания того же самого (чуть более щадящий для памяти):
# prompt = ' Введите целые положительные числа через пробел: '
# list_num1 = [int(n) for n in input(prompt).split()]
# list_num2 = [int(n) for n in input(prompt).split()]

# СДЕЛАТЬ: ух, сколько повторов.. этот способ определённо надо переписать так, чтобы одинаковые print() не повторялись
if not list_num2:
    print('Да')
elif len(list_num1) >= len(list_num2):
    try:
        # ИСПРАВИТЬ: метод index() вызывается лишний раз — оптимизируйте
        if list_num2 == list_num1[list_num1.index(list_num2[0]) : list_num1.index(list_num2[0]) + len(list_num2)]:
            print('Да')
        else:
            print('Нет')
    # если индекс с элементом не найден
    except ValueError:
        print('Нет')
else:
    print('Нет')

# + ещё один способ:
# КОММЕНТАРИЙ: вот, молодчина!
# ОТВЕТИТЬ: а теперь вопрос: в каких случаях выгоднее первый способ или второй?
# УДАЛИТЬ: strip() избыточен
if str(list_num2).strip('[]') in str(list_num1).strip('[]'):
    print('Да')
else:
    print('Нет')

# третий способ через метод find, он может искать подстроки, а не только одиночные символы. Если подстрока не найден возвращает -1.
# Этот метод всё таки не используем, т.к. в задание найти подсписок, а не подстроку.
# КОММЕНТАРИЙ: да, потому что в будущем это будет функция или метод и она будет принимать именно список
# list_num1 = input(' Введите целые положительные числа через пробел: ')
# list_num2 = input(' Введите целые положительные числа через пробел: ')

# if list_num1.find(list_num2) >= 0:
    # print('Да')
# else:
    # print('Нет')


# СДЕЛАТЬ везде: не надо чистить от приглашений для ввода и других дополнительных строк, копируйте вывод целиком
# 1 2 3 4
# 1 2
# Да
   
# 1 2 3 4
# 2 4
# Нет

# проверка если пустая строка
# Введите целые положительные числа через пробел: 1 2 3 4
# Введите целые положительные числа через пробел:
# Да


# ИТОГ: очень хорошо, немного доработать — 5/7
