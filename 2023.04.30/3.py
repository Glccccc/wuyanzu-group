# list_num1 = input(' Введите целые положительные числа через пробел: ').split()
# list_num2 = input(' Введите целые положительные числа через пробел: ').split()
# как следует из задания из каждого ввода формируется отдельный список объектов int.
# list_num1 = [int(num) for num in list_num1]
# list_num2 = [int(num) for num in list_num2]

# ИСПОЛЬЗОВАТЬ: альтернативный способ написания того же самого (чуть более щадящий для памяти):
prompt = ' Введите целые положительные числа через пробел: '
list_num1 = [int(n) for n in input(prompt).split()]
list_num2 = [int(n) for n in input(prompt).split()]

answer = 'Нет'
# СДЕЛАТЬ: ух, сколько повторов.. этот способ определённо надо переписать так, чтобы одинаковые print() не повторялись
if not list_num2:
    answer = 'Да'
elif len(list_num1) >= len(list_num2):
    try:
        # ИСПРАВИТЬ: метод index() вызывается лишний раз — оптимизируйте
        index_occurrence = list_num1.index(list_num2[0])
        if list_num2 == list_num1[index_occurrence : index_occurrence + len(list_num2)]:
            answer = 'Да'
    # если индекс с элементом не найден
    except ValueError:
        pass

print(answer)

# + ещё один способ:
# КОММЕНТАРИЙ: вот, молодчина!
# ОТВЕТИТЬ: а теперь вопрос: в каких случаях выгоднее первый способ или второй?
# Ответ: затрудняюсь ответить...срезы наверно правильнее использовать, чем преобразовывать список в строку.
# хотя если в списке есть повторяющиеся элементы то метод со срезами может некорректно сработать
# например:
# Введите целые положительные числа через пробел: 1 2 6 7 2 3 4
# Введите целые положительные числа через пробел: 2 3 4
# Нет
# Да

# УДАЛИТЬ: strip() избыточен
# Ответ: без strip() же не сработает проверка. [1, 2] != [1, 2,
# print(str(list_num2)) // [1, 2]
# print(str(list_num1)) // [1, 2, 3, 4, 5]
# переписала в тернарный оператор
print('Да' if str(list_num2).strip('[]') in str(list_num1).strip('[]') else 'Нет')

# третий способ через метод find, он может искать подстроки, а не только одиночные символы. Если подстрока не найден возвращает -1.
# Этот метод всё таки не используем, т.к. в задание найти подсписок, а не подстроку.
# КОММЕНТАРИЙ: да, потому что в будущем это будет функция или метод и она будет принимать именно список
# list_num1 = input(' Введите целые положительные числа через пробел: ')
# list_num2 = input(' Введите целые положительные числа через пробел: ')

# if list_num1.find(list_num2) >= 0:
    # print('Да')
# else:
    # print('Нет')

# СДЕЛАТЬ везде: не надо чистить от приглашений для ввода и других дополнительных строк, копируйте вывод целиком
# Введите целые положительные числа через пробел: 1 2 3 4 5
# Введите целые положительные числа через пробел: 2 3 4
# Да
# Да

# проверка если пустая строка
# Введите целые положительные числа через пробел: 1 2 3 4
# Введите целые положительные числа через пробел:
# Да

# Введите целые положительные числа через пробел: 2 3 4
# Введите целые положительные числа через пробел: 1 2 3 4 5
# Нет
# Нет

# Введите целые положительные числа через пробел: 1 2 3 4 5
# Введите целые положительные числа через пробел: 2 4 5
# Нет
# Нет

# Введите целые положительные числа через пробел:
# Введите целые положительные числа через пробел: 1 2 3
# Нет
# Нет

# ИТОГ: очень хорошо, немного доработать — 5/7
