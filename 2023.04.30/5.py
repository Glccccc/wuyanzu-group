scores_letters = {
    1: 'АВЕИНОРСТ',
    2: 'ДКЛМПУ',
    3: 'БГЬЯ',
    4: 'ЙЫ',
    5: 'ЖЗХЦЧ',
    8: 'ФШЭЮ',
    10: 'Щ',
    15: 'Ъ'
}

word_inp = input(' Введите слово: ').upper().replace('Ё', 'Е')

print(sum(
    # ИСПРАВИТЬ: в генераторном выражении значение scores на каждой итерации будет равно нулю
    # КОММЕНТАРИЙ: а если подразумевается, что значение scores будет меняться, то это двойная ошибка: 1) int объекты являются неизменяемыми; 2) если бы были изменяемыми и вы бы как-то прописали это изменение на каждой итерации, то каждое число, возвращаемое генератором во время итерации, содержало бы сумму всех предыдущих очков и очки за очередную букву — а потом все эти числа вы ещё снаружи суммируете функцией sum() — итог вышел бы сильно больше ожидаемого числа
    k
    for i in word_inp for k, v in scores_letters.items()
    if i in v
    # СДЕЛАТЬ: напишите генераторную функцию, эквивалентную данному генераторному выражению, и поэкспериментируйте с разными способами суммирования
), end = '\n\n')

def generator_func(word):
    for i in word:
        for k, v in scores_letters.items():
            if i in v:
                yield k

    
for _ in generator_func(word_inp):
    print(_ , end = ' ')
    
# Введите слово: ёлка
# 6

# 1 2 2 1


# Введите слово: синхрофазотрон
# 29

# 1 1 1 5 1 1 8 1 5 1 1 1 1 1


# ИТОГ: почти хорошо, но требует осмысления — 4/6
